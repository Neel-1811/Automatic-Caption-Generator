/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package acg;

import edu.cmu.sphinx.api.Configuration;
import edu.cmu.sphinx.api.SpeechResult;
import edu.cmu.sphinx.api.StreamSpeechRecognizer;
import edu.cmu.sphinx.result.WordResult;
import it.sauronsoftware.jave.AudioAttributes;
import it.sauronsoftware.jave.Encoder;
import it.sauronsoftware.jave.EncoderException;
import it.sauronsoftware.jave.EncodingAttributes;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.String.format;
import static java.lang.String.format;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author NEEL
 */
public class videoopner extends javax.swing.JFrame {
    File mediaFile,target;
    String file,MEDIA_URL;
    
        

    /**
     * Creates new form videoopner
     */
    public videoopner() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        generate_subtitle = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        open = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AUTOMATIC CAPTION GENERATOR");
        setBackground(new java.awt.Color(204, 204, 0));

        generate_subtitle.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        generate_subtitle.setText("GENERATE SUBTITLE");
        generate_subtitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generate_subtitleActionPerformed(evt);
            }
        });

        open.setFont(new java.awt.Font("Arial Narrow", 1, 13)); // NOI18N
        open.setForeground(new java.awt.Color(204, 0, 51));
        open.setText("OPEN");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 204));
        jLabel1.setText("AUTOMATIC CAPTION GENERATOR");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(generate_subtitle)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(open)))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(open))
                .addGap(27, 27, 27)
                .addComponent(generate_subtitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        JFileChooser jFileChooser1= new JFileChooser();
        jFileChooser1.showOpenDialog(null);
        mediaFile=jFileChooser1.getSelectedFile();
        file=mediaFile.getAbsolutePath();
        MEDIA_URL=mediaFile.toString();
        System.out.println(MEDIA_URL);
        jTextField3.setText(file);
    }//GEN-LAST:event_openActionPerformed

    private void generate_subtitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generate_subtitleActionPerformed
        
        JOptionPane jop = new JOptionPane();
        jop.setMessageType(JOptionPane.PLAIN_MESSAGE);
        jop.setMessage("process Started.");
        JDialog dialog = jop.createDialog(null, "Message");
        dialog.setVisible(true);
        try {
            convertToWav();
        } catch (IOException ex) {
            Logger.getLogger(videoopner.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(videoopner.class.getName()).log(Level.SEVERE, null, ex);
        } catch (EncoderException ex) {
            Logger.getLogger(videoopner.class.getName()).log(Level.SEVERE, null, ex);
        }
        
   
        jop.setMessage("Subtitle Generated.");
        dialog.setVisible(true);
        
        /*
        String [] s= new String[] 
        {"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe",MEDIA_URL};  
        try { 
            Runtime.getRuntime().exec(s);
        } catch (IOException ex) {
            Logger.getLogger(videoopner.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("VLC started.");
        
        */
        
        ProcessBuilder pb = new ProcessBuilder("C:\\Program Files (x86)\\VideoLAN\\VLC\\vlc.exe",MEDIA_URL);
        try {
            Process start = pb.start();
        } catch (IOException ex) {
            Logger.getLogger(videoopner.class.getName()).log(Level.SEVERE, null, ex);
        }
     
    }//GEN-LAST:event_generate_subtitleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(videoopner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(videoopner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(videoopner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(videoopner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new videoopner().setVisible(true);
            }
        });
    }
    
     public void convertToWav() throws IOException, IllegalArgumentException, EncoderException{
            target = new File("C:\\Users\\NEEL\\Documents\\NetBeansProjects\\ACG\\src\\acg\\AudioFile.wav");
            AudioAttributes audio = new AudioAttributes();
            audio.setCodec("pcm_s16le");
            audio.setBitRate(16);
            audio.setChannels(1);
            audio.setSamplingRate(16000);
            EncodingAttributes attrs = new EncodingAttributes();
            attrs.setFormat("wav");
            attrs.setAudioAttributes(audio);
            it.sauronsoftware.jave.Encoder encoder = new it.sauronsoftware.jave.Encoder();
            encoder.encode(mediaFile, target, attrs);
            System.out.println(".wav file generated");
            
            JOptionPane jop = new JOptionPane();
            jop.setMessageType(JOptionPane.PLAIN_MESSAGE);
            jop.setMessage(".WAV file Generated.");
            JDialog dialog = jop.createDialog(null, "Message");
            dialog.setVisible(true);
            createSubtitleFile();
            
                
        }
        
           public void createSubtitleFile() throws IOException{
            Configuration configuration = new Configuration();
            configuration.setAcousticModelPath("file:C:/Users/NEEL/Desktop/sphinx4-master/sphinx4-data/src/main/resources/edu/cmu/sphinx/models/en-us/en-us");
            configuration.setDictionaryPath("file:C:/Users/NEEL/Desktop/sphinx4-master/sphinx4-data/src/main/resources/edu/cmu/sphinx/models/en-us/cmudict-en-us.dict");
            configuration.setLanguageModelPath("file:C:/Users/NEEL/Desktop/sphinx4-master/sphinx4-data/src/main/resources/edu/cmu/sphinx/models/en-us/en-us.lm.bin");
          
            StreamSpeechRecognizer recognizer = new StreamSpeechRecognizer(configuration);
            recognizer.startRecognition(new FileInputStream("C:\\Users\\NEEL\\Documents\\NetBeansProjects\\ACG\\src\\acg\\AudioFile.wav"));
            SpeechResult result = null;
            String mediaFile_new=mediaFile.toString();
            String MEDIA_URL_NEW;
            MEDIA_URL_NEW = mediaFile_new.replace(mediaFile_new.substring(mediaFile_new.length()-4), "");
            File file = new File(MEDIA_URL_NEW+".srt");
            //File file = new File("C:\\Users\\NEEL\\Documents\\NetBeansProjects\\OfflineSubtitle\\src\\offlinesubtitle\\SubtitleFile.srt");
            FileWriter fr = new FileWriter(file, true);
            long subtitle_no=1;
            
            loop:
            while ((result = recognizer.getResult()) != null) {
            
                String word_result="";  
                fr.write(String.valueOf(subtitle_no));
                subtitle_no++;
                System.out.print("\n");                
                fr.write("\n");
                for (WordResult r : result.getWords()) {
                    word_result = word_result + r;     
                }
                    
                System.out.println(word_result);
                System.out.print(startStamp(word_result));
                System.out.print(" --> ");
                fr.write(startStamp(word_result));
                fr.write(" --> ");
                System.out.print(endStamp(word_result));  
                fr.write(endStamp(word_result));
                System.out.print("\n"); 
                fr.write("\n");
                String hypothesis=result.getHypothesis();
                System.out.format("Hypothesis: %s\n", result.getHypothesis());  
                fr.write(hypothesis);
                System.out.print("\n"); 
                fr.write("\n");
                fr.write("\n");
            }
            System.out.println("SUBTITLE GENERATED");      
            fr.close();
            recognizer.stopRecognition();
            target.delete();
        }
           
        private String startStamp(String word_result) {
            Pattern start_pattern = Pattern.compile("(?<=\\[)\\d+(?=:)");
            Matcher match_start = start_pattern.matcher(word_result);
            match_start.find();
            long start=Long.valueOf(match_start.group());
            long millis = start % 1000;
            long second = (start / 1000) % 60;
            long minute = (start / (1000 * 60)) % 60;
            long hour = (start / (1000 * 60 * 60)) % 24;
            return String.format("%02d:%02d:%02d,%d", hour, minute, second, millis);
        }
        private String endStamp(String word_result) {
            Pattern end_pattern = Pattern.compile("(?<=\\[)\\d+(?=:)");
            Matcher match_end = end_pattern.matcher(word_result);
            String temp="";
            while(match_end.find()) {
                temp=match_end.group();
            }
            //match_end.find();
            //long rev_end=Long.valueOf(temp);
            long end=Long.valueOf(temp);
            long millis = end % 1000;
            long second = (end / 1000) % 60;
            long minute = (end / (1000 * 60)) % 60;
            long hour = (end / (1000 * 60 * 60)) % 24;
            return String.format("%02d:%02d:%02d,%d", hour, minute, second, millis);
        }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generate_subtitle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JButton open;
    // End of variables declaration//GEN-END:variables
}
